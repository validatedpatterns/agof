---
- name: Debug
  ansible.builtin.debug:
    msg:
      - "aap_hostname: {{ aap_hostname }}"

- name: "Checkout infrastructure-as-code directory"
  ansible.builtin.git:
    repo: "{{ agof_iac_repo }}"
    version: "{{ agof_iac_repo_version | default('main') }}"
    dest: "{{ agof_controller_config_dir }}"
    force: true
    clone: true
    update: true
    recursive: true
  register: git_checkout

- name: Show Git coordinates
  ansible.builtin.debug:
    msg:
      - "agof_iac_repo: {{ agof_iac_repo }}"
      - "agof_iac_repo_version: {{ agof_iac_repo_version | default('main') }}"
      - "Checked out to: {{ agof_controller_config_dir }}"
      - "Git SHA before checkout: {{ git_checkout.before }}"
      - "Git SHA after checkout: {{ git_checkout.after }}"

- name: Include vars from configs directory
  ansible.builtin.include_vars:
    dir: "{{ agof_controller_config_dir }}"
    ignore_unknown_extensions: true
    extensions:
      - "json"
      - "yaml"
      - "yml"
  tags:
    - always

- name: Wait for Automation Controller to be up
  ansible.builtin.uri:
    url: "https://{{ aap_hostname }}/{{ api_prefix }}/ping/"
    method: GET
    user: '{{ admin_user | default("admin") }}'
    password: "{{ admin_password }}"
    validate_certs: false
  register: check2
  until: check2.json is defined and check2.json.instances[0].capacity > 0 and check2.json.instance_groups[0].capacity > 0
  retries: 60
  delay: 10

- name: Display api ping results
  ansible.builtin.debug:
    msg: '{{ check2.json }}'

- name: Default to entitlement
  ansible.builtin.set_fact:
    entitle_aap: true

- name: Entitle AAP if needed
  block:
    # AAP will have an empty license_info block if it hasn't been entitled
    # of course we expect to entitle it through the containerized installer
    # But in case we didn't use the containerized installer, we have this check
    # and this block as a failsafe
    - name: Check on current license_info status
      ansible.builtin.uri:
        url: 'https://{{ aap_hostname }}/{{ api_prefix }}/config/'
        method: GET
        user: '{{ admin_user | default("admin") }}'
        password: "{{ admin_password }}"
        validate_certs: false
        force_basic_auth: true
      register: config_check

    - name: Debug license_info status
      ansible.builtin.debug:
        var: config_check

    - name: Turn off entitlement if needed
      ansible.builtin.set_fact:
        entitle_aap: false
      when:
        - config_check.json.license_info.valid_key

  rescue:
    - name: Notify that we are going to entitle
      ansible.builtin.debug:
        msg: "Caught an exception, entitling"

- name: Post manifest file if needed
  ansible.builtin.uri:
    url: 'https://{{ aap_hostname }}/{{ api_prefix }}/config/'
    method: POST
    user: '{{ admin_user | default("admin") }}'
    password: "{{ admin_password }}"
    body: '{ "eula_accepted": true, "manifest": "{{ manifest_content }}" }'
    body_format: json
    validate_certs: false
    force_basic_auth: true
  when: entitle_aap
  register: license_controller
  until: license_controller is not failed
  retries: 5

- name: Debug infra.controller_configuration.dispatch common variables
  ansible.builtin.debug:
    msg:
      - "aap_hostname: {{ aap_hostname }}"
      - "aap_validate_certs: {{ aap_validate_certs }}"
      - "aap_username: {{ aap_username }}"
      - "aap_request_timeout: {{ aap_request_timeout }}"
      - "aap_configuration_async_dir: {{ aap_configuration_async_dir }}"
  when:
    - agof_configure_aap_debug

- name: Perform any necessary pre-config fixups
  when: (perform_pre_config_fixups|bool) is true
  block:
    - name: Pre-config fixes
      ansible.builtin.include_role:
        name: agof_configure_aap/roles/pre_config_fixups

- name: "Configure AAP - Version 2.5+"
  block:
    - name: "Configure AAP"
      ansible.builtin.include_role:
        name: infra.aap_configuration.dispatch
